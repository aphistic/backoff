// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.
// This file was generated by robots at
// 2019-01-02T16:44:19-06:00
// using the command
// $ go-mockgen -f github.com/efritz/backoff

package mocks

import (
	backoff "github.com/efritz/backoff"
	"time"
)

// MockBackoff is a mock impelementation of the Backoff interface (from the
// package github.com/efritz/backoff) used for unit testing.
type MockBackoff struct {
	// CloneFunc is an instance of a mock function object controlling the
	// behavior of the method Clone.
	CloneFunc *BackoffCloneFunc
	// NextIntervalFunc is an instance of a mock function object controlling
	// the behavior of the method NextInterval.
	NextIntervalFunc *BackoffNextIntervalFunc
	// ResetFunc is an instance of a mock function object controlling the
	// behavior of the method Reset.
	ResetFunc *BackoffResetFunc
}

// NewMockBackoff creates a new mock of the Backoff interface. All methods
// return zero values for all results, unless overwritten.
func NewMockBackoff() *MockBackoff {
	return &MockBackoff{
		CloneFunc: &BackoffCloneFunc{
			defaultHook: func() backoff.Backoff {
				return nil
			},
		},
		NextIntervalFunc: &BackoffNextIntervalFunc{
			defaultHook: func() time.Duration {
				return 0
			},
		},
		ResetFunc: &BackoffResetFunc{
			defaultHook: func() {
				return
			},
		},
	}
}

// NewMockBackoffFrom creates a new mock of the MockBackoff interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockBackoffFrom(i backoff.Backoff) *MockBackoff {
	return &MockBackoff{
		CloneFunc: &BackoffCloneFunc{
			defaultHook: i.Clone,
		},
		NextIntervalFunc: &BackoffNextIntervalFunc{
			defaultHook: i.NextInterval,
		},
		ResetFunc: &BackoffResetFunc{
			defaultHook: i.Reset,
		},
	}
}

// BackoffCloneFunc describes the behavior when the Clone method of the
// parent MockBackoff instance is invoked.
type BackoffCloneFunc struct {
	defaultHook func() backoff.Backoff
	hooks       []func() backoff.Backoff
	history     []BackoffCloneFuncCall
}

// Clone delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBackoff) Clone() backoff.Backoff {
	r0 := m.CloneFunc.nextHook()()
	m.CloneFunc.history = append(m.CloneFunc.history, BackoffCloneFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Clone method of the
// parent MockBackoff instance is invoked and the hook queue is empty.
func (f *BackoffCloneFunc) SetDefaultHook(hook func() backoff.Backoff) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Clone method of the parent MockBackoff instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *BackoffCloneFunc) PushHook(hook func() backoff.Backoff) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BackoffCloneFunc) SetDefaultReturn(r0 backoff.Backoff) {
	f.SetDefaultHook(func() backoff.Backoff {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BackoffCloneFunc) PushReturn(r0 backoff.Backoff) {
	f.PushHook(func() backoff.Backoff {
		return r0
	})
}

func (f *BackoffCloneFunc) nextHook() func() backoff.Backoff {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of BackoffCloneFuncCall objects describing the
// invocations of this function.
func (f *BackoffCloneFunc) History() []BackoffCloneFuncCall {
	return f.history
}

// BackoffCloneFuncCall is an object that describes an invocation of method
// Clone on an instance of MockBackoff.
type BackoffCloneFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 backoff.Backoff
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BackoffCloneFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BackoffCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BackoffNextIntervalFunc describes the behavior when the NextInterval
// method of the parent MockBackoff instance is invoked.
type BackoffNextIntervalFunc struct {
	defaultHook func() time.Duration
	hooks       []func() time.Duration
	history     []BackoffNextIntervalFuncCall
}

// NextInterval delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBackoff) NextInterval() time.Duration {
	r0 := m.NextIntervalFunc.nextHook()()
	m.NextIntervalFunc.history = append(m.NextIntervalFunc.history, BackoffNextIntervalFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the NextInterval method
// of the parent MockBackoff instance is invoked and the hook queue is
// empty.
func (f *BackoffNextIntervalFunc) SetDefaultHook(hook func() time.Duration) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NextInterval method of the parent MockBackoff instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BackoffNextIntervalFunc) PushHook(hook func() time.Duration) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BackoffNextIntervalFunc) SetDefaultReturn(r0 time.Duration) {
	f.SetDefaultHook(func() time.Duration {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BackoffNextIntervalFunc) PushReturn(r0 time.Duration) {
	f.PushHook(func() time.Duration {
		return r0
	})
}

func (f *BackoffNextIntervalFunc) nextHook() func() time.Duration {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of BackoffNextIntervalFuncCall objects
// describing the invocations of this function.
func (f *BackoffNextIntervalFunc) History() []BackoffNextIntervalFuncCall {
	return f.history
}

// BackoffNextIntervalFuncCall is an object that describes an invocation of
// method NextInterval on an instance of MockBackoff.
type BackoffNextIntervalFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BackoffNextIntervalFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BackoffNextIntervalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BackoffResetFunc describes the behavior when the Reset method of the
// parent MockBackoff instance is invoked.
type BackoffResetFunc struct {
	defaultHook func()
	hooks       []func()
	history     []BackoffResetFuncCall
}

// Reset delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBackoff) Reset() {
	m.ResetFunc.nextHook()()
	m.ResetFunc.history = append(m.ResetFunc.history, BackoffResetFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Reset method of the
// parent MockBackoff instance is invoked and the hook queue is empty.
func (f *BackoffResetFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Reset method of the parent MockBackoff instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *BackoffResetFunc) PushHook(hook func()) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *BackoffResetFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *BackoffResetFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *BackoffResetFunc) nextHook() func() {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of BackoffResetFuncCall objects describing the
// invocations of this function.
func (f *BackoffResetFunc) History() []BackoffResetFuncCall {
	return f.history
}

// BackoffResetFuncCall is an object that describes an invocation of method
// Reset on an instance of MockBackoff.
type BackoffResetFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BackoffResetFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BackoffResetFuncCall) Results() []interface{} {
	return []interface{}{}
}
